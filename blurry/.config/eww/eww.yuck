(defpoll SONG :interval "1s" `scripts/music_info --song`)
(defpoll ARTIST :interval "1s" `scripts/music_info --artist`)
(defpoll STATUS :interval "1s" `scripts/music_info --status`)
(defpoll CURRENT :interval "1s" `scripts/music_info --time`)
(defpoll COVER :interval "1s" `scripts/music_info --cover`)
(defpoll CTIME :interval "1s" `scripts/music_info --ctime`)
(defpoll TTIME :interval "1s" `scripts/music_info --ttime`)
(defpoll VOLUME :interval "0.5s" `scripts/volume.sh --get`)


(defpoll BRIGHTNESS :interval "0.5s" `scripts/brightness.sh --get`)
(defpoll BRIGHTNESSPER :interval "0.5s" `scripts/brightness.sh --get-percent`)

(defwindow brightness :monitor 0 :stacking "fg"
    :geometry (geometry :width "25%" :height "25%" :anchor "center")
    (brightness))

(defwindow brightness-bar :monitor 0 :stacking "fg"
    :geometry (geometry :y "-50px" :width "10%" :height "2.5%" :anchor "bottom center")
    (brightness-bar))

(defwidget brightness []
  (box :class "brightness-window" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :class "info" :vexpand "true" :hexpand "false" :orientation "h"
      (label :halign "center" :class "brightness-text" :text BRIGHTNESS))

    (box :class "info" :vexpand "true" :hexpand "false" :orientation "h" :spacing 20
      (button :class "decrease-btn"
              :onclick "scripts/brightness.sh --decrease; eww update BRIGHTNESS=$(scripts/brightness.sh --get)"
              "")
      (button :class "increase-btn"
              :onclick "scripts/brightness.sh --increase; eww update BRIGHTNESS=$(scripts/brightness.sh --get)"
              ""))

    (box :class "brightness_bar" :vexpand "true" :hexpand "true" :orientation "h"
      (scale :active true
             :min 0 :max 255
             :value BRIGHTNESS
             :onchange "scripts/brightness.sh --set {}; eww update BRIGHTNESS={};")
    )
  )
)

(defwidget brightness-bar []
    (box :class "brightness-bar-window" :vexpand "false" :hexpand "false" :orientation "v"
        (box :class "small_brightness_bar" :vexpand "false" :hexpand "false"
        (scale :min 0 :max 255 :active "false" :value BRIGHTNESS))
        (label :text "󰃠  ${BRIGHTNESSPER}%" :halign "center" :class "brightVal")))

(defwindow volume-bar :monitor 0 :stacking "fg"
    :geometry (geometry :y "-50px" :width "10%" :height "2.5%" :anchor "bottom center")
    (volume-bar))

(defwidget volume-bar []
    (box :class "brightness-bar-window" :vexpand "false" :hexpand "false" :orientation "v"
        (box :class "small_brightness_bar" :vexpand "false" :hexpand "false"
        (scale :min 0 :max 100 :active "false" :value VOLUME))
        (label :text "   ${VOLUME}%" :halign "center" :class "brightVal")))
;; music
(defwindow music :stacking "fg" :focusable "false"
	    :geometry (geometry :x "34%" :y "40%" :width "32%" :height "20%" )
					(music))

(deflisten NOTIFICATION "")

(defwindow notifications :monitor 0 :stacking "fg" :focusable "false"
        :geometry (geometry :y "50px" :anchor "top center")
            (box :class "notifications" (literal :content NOTIFICATION )))

(defwidget music [] 
	(box :class "eww-music-window" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
		(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
			(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "btn_prev" :onclick "scripts/music_info --prev" "玲")
				(button :class "btn_play" :onclick "scripts/music_info --toggle" STATUS)
				(button :class "btn_next" :onclick "scripts/music_info --next" "怜"))
			(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" 
				(scale :onscroll "mpc -q seek +1" :min 0 :active "true" :max 100 :value CURRENT)))))


(defwindow musicfancy :stacking "fg" :focusable "false"
	    :geometry (geometry :width "18%" :height "32%" :anchor "center" )
					(musicfancy))



(defwidget musicfancy []
    (box :class "music" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
          (box :class "cover" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
          (label :text SONG :halign "center" :class "song-text")
          (label :text ARTIST :halign "center" :class "artist-text")
			(box :class "musicButtons" :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "music_btn" :onclick "scripts/music_info --prev" "󰼨")
				(button :class "music_btn" :onclick "scripts/music_info --toggle" STATUS)
				(button :class "music_btn" :onclick "scripts/music_info --next" "󰼧"))
          (box :class "song_duration_bar" :vexpand "true" :hexpand "true" :valign "end" :width 50
            (scale :min 0 :max 100 :value CURRENT))))


(defwindow workspaces :monitor 0 :stacking "fg" :focusable "false"
    :geometry (geometry :width "800px" :height "600px" :anchor "center")
        (workspaces))

(defwidget workspaces []
  (box 
    :class "workspace-container"
    :orientation "v"
    :space-evenly false
    :vexpand false
    :hexpand false
    (overlay
      :class "workspace-overlay"
        (box :class "max")

      
      (transform :scale-x "25%" :translate-x "0%" :scale-y "25%" :translate-y "0%"(box 
        :class "window"
        (label :text "Chat")))
    (transform :scale-x "25%" :translate-x "100%" :scale-y "25%" :translate-y "100%" (box 
        :class "window"
        (label :text "BOB")))
    )
  )
)

(defwindow logout :stacking "fg" :focusable "true" :monitor 0 
    :geometry (geometry :width "75%" :height "60%" :anchor "center")
    (logout))

(defwidget logout []
    (box :orientation "v" :space-evenly "true" :spacing 50 :class "logout-win"
        (box :orientation "h" :space-evenly "true" :spacing 50 :vexpand "true"
            (button :class "logout-button" :onclick `scripts/powermenu.sh --lock` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "")
                    (label :class "logout-text" :valign "end" :vexpand "true" :text "Lock")))

            (button :class "logout-button" :onclick `scripts/powermenu.sh --shutdown` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "󰐥")
                    (label :class "logout-text" :valign "end" :vexpand "true" :text "Power off")))

            (button :class "logout-button" :onclick `scripts/powermenu.sh --reboot` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "󰑓")
                    (label :class "logout-text" :valign "end" :vexpand "true" :text "Reboot")))
        )
        (box :orientation "h" :space-evenly "true" :spacing 50 :vexpand "true"
            (button :class "logout-button" :onclick `scripts/powermenu.sh --logout` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "󰍃")
                    (label :class "logout-text" :valign "end" :vexpand "true" :text "Log out")))

            (button :class "logout-button" :onclick `scripts/powermenu.sh --hibernate` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "")
                    (label :class "logout-text" :valign "end" :vexpand "true" :text "Hibernate")))

            (button :class "logout-button" :onclick `scripts/powermenu.sh --suspend` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "")
                    (label :class "logout-text" :text "Suspend" :valign "end" :vexpand "true")))
        )
    )
)

(defwidget closer [window]
  (eventbox :onclick "eww close ${window} && eww close ${window}-closer"))
 
(defwindow logout-closer
  :monitor 0
  :geometry (geometry :width "100%" :height "100%")
  :stacking "fg"
  :focusable false
  (closer :window "logout"))

(defvar COMMAND "echo 'empty command lil bro'")

(defwindow confirm :stacking "fg" :monitor 0
    :geometry (geometry :anchor "center" :width 500 :height 200)
    (confirm)
)

(defwidget confirm []
    (box :class "confirm-win" :orientation "v" :space-evenly "false"
        (box :space-evenly "true"
            (label :text "Are you sure?" :class "confirm-text")
        )
        (box :vexpand "true" :space-evenly "true" :orientation "h" :spacing 10
            (button :onclick `${COMMAND} && eww close confirm` :class "confirm-button confirmed" "")
            (button :onclick `eww close confirm` :class "confirm-button noconfirm" "")
        )
    )
)

