

(defpoll SONG :interval "1s" `scripts/music_info --song`)
(defpoll ARTIST :interval "1s" `scripts/music_info --artist`)
(defpoll STATUS :interval "1s" `scripts/music_info --status`)
(defpoll CURRENT :interval "1s" `scripts/music_info --time`)
(defpoll COVER :interval "1s" `scripts/music_info --cover`)
(defpoll CTIME :interval "1s" `scripts/music_info --ctime`)
(defpoll TTIME :interval "1s" `scripts/music_info --ttime`)
(defpoll VOLUME :interval "0.5s" `scripts/volume.sh --get`)

(defpoll music-player1     :interval "1s" 'scripts/MediaControl.sh --player')
(defpoll music-art1        :interval "3s" 'scripts/MediaControl.sh --cover')
(defpoll music-title1      :interval "1s" 'scripts/MediaControl.sh --title')
(defpoll music-artist1     :interval "1s" 'scripts/MediaControl.sh --artist')
(defpoll music-status1     :interval "1s" 'scripts/MediaControl.sh --status')
(defpoll music-position1   :interval "1s" 'scripts/MediaControl.sh --position')
(defpoll music-positions1  :interval "1s" 'scripts/MediaControl.sh --positions')
(defpoll music-length1     :interval "1s" 'scripts/MediaControl.sh --length')
(defpoll music-lengths1    :interval "1s" 'scripts/MediaControl.sh --lengths')
(defpoll shuffle1          :interval "1s" 'scripts/MediaControl.sh --shuffle')
(defpoll loop1             :interval "1s" 'scripts/MediaControl.sh --loop')


;; Vars ;;

;; Widgets ;;
(defwidget shuffle [color action status]
	(eventbox
		:cursor "pointer"
		(button
			:onclick action
			:style "color: ${color}"
			:tooltip status
			"󰒟"
		)
	)
)

(defwidget loop [icon color status action]
	(eventbox
		:cursor "pointer"
		(button
			:onclick action
			:style "color: ${color}"
			:tooltip status
			icon
		)
	)
)

(defwidget player []
	(box
		:class "player"
		:space-evenly false
		(box
			:class "player-art"
			:style "background-image: url('${music-art1}')"
			(box
				:class "player-info"
				:space-evenly false
				:orientation "v"
				:spacing 10
				(box
					:class "top-icons"
					(box
						:space-evenly false
						:spacing 10
						(shuffle
							:action {music-player1 == "MPD" ? "mpc random" : "playerctl -p ${music-player1} shuffle toggle"}
							:color {shuffle1 == "On" ? "#81ae5f" : "#b8bfe5"}
							:status shuffle1
						)
						(loop
							:action {loop1 == "None" ? "playerctl -p ${music-player1} loop playlist" :
							loop1 == "Off" ? "mpc repeat on" :
							loop1 == "On" ? "mpc repeat off" :
							loop1 == "Playlist" ? "playerctl -p ${music-player1} loo1 track" : "playerctl -p ${music-player1} loop none"}
							:icon  {loop1 == "Track" ? "󰑘" :
							loop1 == "Playlist" || loop1 == "On" ? "󰑖" : "󰑗"}
							:color {loop1 == "Playlist" || loop1 == "Track" || loop1 == "On" ? "#81ae5f" : "#b8bfe5"}
							:status loop1
						)
					)
					(box
						(button
							:class {music-player1 != "spotify" ? "mpd-icon" : "spotify-icon"}
							:halign "end"
							{music-player1 != "spotify" ? "󰎆" : "󰓇"}
						)
					)
				)
				(label
					:class "player-title"
					:halign "start"
					:text music-title1
					:limit-width 30
					:wrap true
					:xalign 0
				)
				(label
					:class "player-artist"
					:halign "start"
					:text music-artist1
					:limit-width 35
				)

				(box
					:space-evenly false
					:orientation "v"
					:valign "end"
					:spacing 6
					:vexpand true
					(box
						:class "player-bar"
						(eventbox
							:cursor "pointer"
							(scale
								:onchange {music-player1 == "MPD" ? "mpc seek {}" : "playerctl -p ${music-player1} position {}"}
								:min 0
								:max {music-lengths1 ?: "100"}
								:value {music-positions1 ?: "0"}
							)
						)
					)
					(box
						:class "player-position"
						:space-evenly false
						:valign "end"
						:spacing 3
						(label
							:class "player-time"
							:text {music-position1 ?: "0:00"}
						)
						(label :class "player-time" :text "/")
						(label
							:class "player-time"
							:text {music-length1 ?: "0:00"}
						)
					)
				)
			)
		)
		(box
			:class "player-controls"
			:orientation "v"
			:valign "center"
			:hexpand true
			:space-evenly false
			:spacing 20
			(eventbox
				:cursor "pointer"
				(button
					:class "player-previous"
					:onclick "scripts/MediaControl.sh --previous"
					"󰒮"
				)
			)
			(eventbox
				:cursor "pointer"
				(button
					:class "player-toggle"
					:onclick "scripts/MediaControl.sh --toggle"
					{music-status1 == "Playing" ? "󰏤" : music-status1 == "Paused" ? "󰐊" : "󰓛"}
				)
			)
			(eventbox
				:cursor "pointer"
				(button
					:class "player-next"
					:onclick "scripts/MediaControl.sh --next"
					"󰒭"
				)
			)
      (eventbox
				:cursor "pointer"
				(button
					:class "min"
					:onclick "eww open --toggle music"
					"×"
				)
			)
		)
	)
)

;; Windows ;;
(defwindow music
  :geometry
  (geometry
    :y "-7%"
    :anchor "bottom center"
  )
	:wm-ignore false
  (player)
)


(defpoll BRIGHTNESS :interval "0.5s" `scripts/brightness.sh --get`)
(defpoll BRIGHTNESSPER :interval "0.5s" `scripts/brightness.sh --get-percent`)

(defwindow brightness :monitor 0 :stacking "fg"
    :geometry (geometry :width "25%" :height "25%" :anchor "center")
    (brightness))

(defwindow brightness-bar :monitor 0 :stacking "fg"
    :geometry (geometry :y "-50px" :width "10%" :height "2.5%" :anchor "bottom center")
    (brightness-bar))

(defwidget brightness []
  (box :class "brightness-window" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :class "info" :vexpand "true" :hexpand "false" :orientation "h"
      (label :halign "center" :class "brightness-text" :text BRIGHTNESS))

    (box :class "info" :vexpand "true" :hexpand "false" :orientation "h" :spacing 20
      (button :class "decrease-btn"
              :onclick "scripts/brightness.sh --decrease; eww update BRIGHTNESS=$(scripts/brightness.sh --get)"
              "")
      (button :class "increase-btn"
              :onclick "scripts/brightness.sh --increase; eww update BRIGHTNESS=$(scripts/brightness.sh --get)"
              ""))

    (box :class "brightness_bar" :vexpand "true" :hexpand "true" :orientation "h"
      (scale :active true
             :min 0 :max 255
             :value BRIGHTNESS
             :onchange "scripts/brightness.sh --set {}; eww update BRIGHTNESS={};")
    )
  )
)

(defwidget brightness-bar []
    (box :class "brightness-bar-window" :vexpand "false" :hexpand "false" :orientation "v"
        (box :class "small_brightness_bar" :vexpand "false" :hexpand "false"
        (scale :min 0 :max 255 :active "false" :value BRIGHTNESS))
        (label :text "󰃠  ${BRIGHTNESSPER}%" :halign "center" :class "brightVal")))

(defwindow volume-bar :monitor 0 :stacking "fg"
    :geometry (geometry :y "-50px" :width "10%" :height "2.5%" :anchor "bottom center")
    (volume-bar))

(defwidget volume-bar []
    (box :class "brightness-bar-window" :vexpand "false" :hexpand "false" :orientation "v"
        (box :class "small_brightness_bar" :vexpand "false" :hexpand "false"
        (scale :min 0 :max 100 :active "false" :value VOLUME))
        (label :text "   ${VOLUME}%" :halign "center" :class "brightVal")))
;; music
(defwindow musicOld :stacking "fg" :focusable "false"
	    :geometry (geometry :x "34%" :y "40%" :width "32%" :height "20%" )
					(music))

(deflisten NOTIFICATION "")

(defwindow notifications :monitor 0 :stacking "fg" :focusable "false"
        :geometry (geometry :y "50px" :anchor "top center")
            (box :class "notifications" (literal :content NOTIFICATION )))

(defwidget music [] 
	(box :class "eww-music-window" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
		(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
			(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "btn_prev" :onclick "scripts/music_info --prev" "玲")
				(button :class "btn_play" :onclick "scripts/music_info --toggle" STATUS)
				(button :class "btn_next" :onclick "scripts/music_info --next" "怜"))
			(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" 
				(scale :onscroll "mpc -q seek +1" :min 0 :active "true" :max 100 :value CURRENT)))))


(defwindow musicfancy :stacking "fg" :focusable "false"
	    :geometry (geometry :width "18%" :height "32%" :anchor "center" )
					(musicfancy))



(defwidget musicfancy []
    (box :class "music" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
          (box :class "cover" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
          (label :text SONG :halign "center" :class "song-text")
          (label :text ARTIST :halign "center" :class "artist-text")
			(box :class "musicButtons" :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "music_btn" :onclick "scripts/music_info --prev" "󰼨")
				(button :class "music_btn" :onclick "scripts/music_info --toggle" STATUS)
				(button :class "music_btn" :onclick "scripts/music_info --next" "󰼧"))
          (box :class "song_duration_bar" :vexpand "true" :hexpand "true" :valign "end" :width 50
            (scale :min 0 :max 100 :value CURRENT))))




(defwindow logout :stacking "fg" :focusable "true" :monitor 0 
    :geometry (geometry :width "75%" :height "60%" :anchor "center")
    (logout))

(defwidget logout []
    (box :orientation "v" :space-evenly "true" :spacing 50 :class "logout-win"
        (box :orientation "h" :space-evenly "true" :spacing 50 :vexpand "true"
            (button :class "logout-button" :onclick `scripts/powermenu.sh --lock` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "")
                    (label :class "logout-text" :valign "end" :vexpand "true" :text "Lock")))

            (button :class "logout-button" :onclick `scripts/powermenu.sh --shutdown` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "󰐥")
                    (label :class "logout-text" :valign "end" :vexpand "true" :text "Power off")))

            (button :class "logout-button" :onclick `scripts/powermenu.sh --reboot` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "󰑓")
                    (label :class "logout-text" :valign "end" :vexpand "true" :text "Reboot")))
        )
        (box :orientation "h" :space-evenly "true" :spacing 50 :vexpand "true"
            (button :class "logout-button" :onclick `scripts/powermenu.sh --logout` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "󰍃")
                    (label :class "logout-text" :valign "end" :vexpand "true" :text "Log out")))

            (button :class "logout-button" :onclick `scripts/powermenu.sh --hibernate` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "")
                    (label :class "logout-text" :valign "end" :vexpand "true" :text "Hibernate")))

            (button :class "logout-button" :onclick `scripts/powermenu.sh --suspend` :hexpand "true"
                (box :orientation "v" :space-evenly "false"
                    (label :class "logout-icon" :text "")
                    (label :class "logout-text" :text "Suspend" :valign "end" :vexpand "true")))
        )
    )
)

(defwidget closer [window]
  (eventbox :onclick "eww close ${window} && eww close ${window}-closer"))
 
(defwindow logout-closer
  :monitor 0
  :geometry (geometry :width "100%" :height "100%")
  :stacking "fg"
  :focusable false
  (closer :window "logout"))

(defvar COMMAND "echo 'empty command lil bro'")

(defwindow confirm :stacking "fg" :monitor 0
    :geometry (geometry :anchor "center" :width 500 :height 200)
    (confirm)
)

(defwidget confirm []
    (box :class "confirm-win" :orientation "v" :space-evenly "false"
        (box :space-evenly "true"
            (label :text "Are you sure?" :class "confirm-text")
        )
        (box :vexpand "true" :space-evenly "true" :orientation "h" :spacing 10
            (button :onclick `${COMMAND} && eww close confirm` :class "confirm-button confirmed" "")
            (button :onclick `eww close confirm` :class "confirm-button noconfirm" "")
        )
    )
)

